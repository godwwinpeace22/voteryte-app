/*
  * Database structure and relationships for voteryte
  * Entities
      Users, elections, votes, comments, posts, 
      campaigns, contestants, activities, chat_messages,events, event_chats, manifestos, broadcasts

*/

// users collection
// let users = gun.get('users')

// current logged in user info/profile/reference
let username = gun.user().alias // check this
let userProfile = gun.get(username)

let electionId = 'the_current_election_id'

// add a user
let user = {}; gun.get(user.username).put(user)

// update a user
gun.get('username_of_user').put('the_new_data')

// create an election
let election_data = {}
let election = gun.get('elections').get(electionId).put(election_data)
election.get('author').put(userProfile)
userProfile.get('created').set(election)

// get an election
gun.get('elections').get(electionId).on((data, id) => {}, true)

// create a post
let post_data = {}
let post = gun.get('posts').get(electionId).get('random_uuid').put(post_data)
post.get('author').put(userProfile)
userProfile.get('posts').set(post)


// get a post
gun.get('posts').get(electionId).get('the_post_id').once((post, id)=>{})
// get all posts in an election
gun.get('posts').get(electionId).map().on((post,data) => {})
//get a user's posts
gun.get(username).get('posts').map().once()


// create a comment
let comment_data = {}
let comment = gun.get('posts')
  .get(electionId)
  .get('post_id')
  .get('comments')
  .get('random_uuid')
  .put(comment_data)
comment.get('author').put(userProfile)


// get a comment
gun.get('posts')
  .get(electionId)
  .get('post_id')
  .get('comments')
  .get('comment_id')
  .once()

// get all comments for a post
gun.get('posts')
  .get(electionId)
  .get('post_id')
  .get('comments').map()
  .once()

  
// create a broadcast
let broadcast_data = {}
let broadcast = gun.get('broadcasts')
  .get(electionId)
  .get('random_uuid')
  .put(broadcast_data)
broadcast.get('author').put(userProfile)
userProfile.get('broadcasts').set(broadcast)


// get a broadcast
gun.get('broadcasts')
  .get(electionId)
  .get('broadcast_id').once()
// get all broadcasts for an election
gun.get('broadcasts')
  .get(electionId).map().once()
// get a user's broadcasts
userProfile.get('broadcasts')
  .map().once()


// create a vote
let vote_data = {
  tracking_code: '', // a code only the voter knows, that can be used to 
    // verify that their votes counted by searching for the vote corresponding 
    // to the code
    // also store a copy of the code with no reference to the voter
    // so as to be able to validate codes that were not generated by the system
}

let v = gun.user().get('votes')
    .get('electionId')
    .put(vote_data)

let vote = gun.get('elections')
  .get(electionId)
  .get('votes')
  .set(v)

// get all votes for an election
gun.get('elections')
  .get(electionId)
  .get('votes')
  .map()
  .on()
  

// create a contestant
let contestant_data = ['role','date_created','author']
let contestant =  gun.get('elections')
  .get(electionId)
  .get('contestant')
  .get('contestantId')
  .put(contestant)
  let role_node = gun.get('elections').get(electionId)
  .get('roles').get(" the role's key or #")
  
  contestant.get('role')
  .put(role_node)
userProfile
  .get('contests')
  .get('selected electionid')
  .put(contestant)



// get a contestant
gun.get('elections')
  .get(electionId)
  .get('contestants')
  .get('contestantId')
  .on()
// get all election's contestants
gun.get('elections')
  .get(electionId)
  .get('contestants')
  .map()
  .on()
// get a user's contests
userProfile
  .get('contests')
  .map()
  .once()


// create a voter

gun.get('elections')
  .get(electionId)
  .get('voters')
  .put(userProfile)

userProfile.get('enrolled')
  .set(election)



// get all voters in an election
gun.get('elections')
  .get(electionId)
  .get('voters')
  .map()
  .on()



// follow a user
let userToFollow = gun.get("the_user's id")
userToFollow
  .get('followers')
  .get(userProfile.uid) // so that unfollowing can work
  .put(userProfile)
userProfile.get('following')
  .get(userToFollow.uid)
  .put(userToFollow)


  // unfollow a user
  gun.get('the users id')
    .get('followers')
    .get(userToFollow.uid)
    .put(null);
  userProfile.get('following')
    .get(userToFollow.uid)
    .put(null)

// get a user's followers
gun.get('the users id')
  .get('followers')
  .map().once()
// get a user's following
gun.get('the users id')
  .get('folowing')
  .map().once()



// create an activity
let activity_data = {}
let activity = gun.get('activities')
  .get(electionId)
  .get('random_uid')
  .put(activity_data)
activity.get('author')
  .put(userProfile)

// get activities for an election
gun.get('activities')
  .get(electionId)
  .map()
  .on()



// create a chat message
let chat_data = {}
let chat_message = gun.get('chat_messages')
  .get(electionId)
  .get('message id')
  .put(chat_data)


// get election's chats
gun.get('chat_messages')
  .get(electionId)
  .map()
  .on()


// create an event
let eventData = {}
let event = gun.get('events')
  .get(electionId)
  .get('event id')
  .put(eventData)
event.get('author').put(userProfile)
userProfile.get('events')
  .put(event)


// get an event
gun.get('events')
  .get(electionId)
  .get('event id')
  .on()
// get election's events
gun.get('events')
  .get(electionId)
  .map()
  .once()
// get a user's events
userProfile.get('events')
  .map()
  .once()



// create a manifesto
let manifesto_data = {}
let electionRef = gun.get('elections')
  .get(electionId)

let manifesto = userProfile.get('manifestos')
  .get('manifesto Id')
  .put(manifesto_data)

manifesto.get('author')
  .put(userProfile)
manifesto.get('electionRef')
  .put(electionRef)
electionRef
  .get('manifestos')
  .set(manifesto)


// get a manifesto
userProfile.get('manifestos')
  .get('manifesto id')
  .once()
// get an election manifestos
gun.get('elections')
  .get(electionId)
  .get('manifestos')
  .map()
  .once()

// get a user's manifestos
userProfile.get('manifestos')
  .map()
  .once()


// create a campaign
let campaign_data = {}
let campaign = gun.get('campaigns')
  .get(electionId)
  .get(Date.now())
  .put(campaign)
campaign.get('author').put(userProfile)
userProfile.get('campaigns')
  .set(campaign)


// get an election's campaigns
gun.get('campaigns')
  .get(electionId)
  .map()
  .once()


